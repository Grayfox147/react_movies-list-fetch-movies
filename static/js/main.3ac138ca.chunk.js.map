{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","title","imgUrl","description","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","FindMovie","addMovie","inputRef","useRef","useState","query","setQuery","setMovie","appliedQuery","setAppliedQuery","isLoading","setIsLoading","errorMessage","setErrorMessage","handleSubmit","fetch","then","res","json","catch","Response","Error","getMovie","data","movieData","imdbID","Title","Plot","Poster","finally","applyQuery","useCallback","debounce","useEffect","current","focus","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","classNames","value","onChange","target","ref","onClick","disabled","length","undefined","App","setMovies","addedMovie","some","element","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ac138ca.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    title,\n    imgUrl,\n    description,\n    imdbUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=40cd6ae9';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport const NormalizeMovieData = (movieData: MovieData): Movie => {\n  return ({\n    title: movieData.Title,\n    description: movieData.Plot,\n    imgUrl: movieData.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : movieData.Poster,\n    imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n    imdbId: movieData.imdbID,\n  });\n};\n","import classNames from 'classnames';\nimport React, {\n  useEffect,\n  useRef,\n  useCallback,\n  useState,\n} from 'react';\nimport debounce from 'lodash.debounce';\nimport { getMovie, NormalizeMovieData } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype FindMovieProps = {\n  addMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<FindMovieProps> = ({ addMovie }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n\n  const handleSubmit = () => {\n    setIsLoading(true);\n    getMovie(appliedQuery)\n      .then((data) => {\n        if ((data as MovieData).imdbID) {\n          setMovie(NormalizeMovieData(data as MovieData));\n        } else {\n          setErrorMessage(true);\n        }\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const applyQuery = useCallback(\n    debounce(\n      setAppliedQuery,\n      1000,\n    ),\n    [appliedQuery],\n  );\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleAddingMovie = (movietoAdd: Movie) => {\n    addMovie(movietoAdd);\n    setAppliedQuery('');\n    setQuery('');\n    setMovie(null);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          handleSubmit();\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input',\n                { 'is-dander': errorMessage },\n              )}\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                applyQuery(event.target.value);\n                setErrorMessage(false);\n              }}\n              ref={inputRef}\n            />\n          </div>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button is-light',\n                { 'is-loading': isLoading },\n              )}\n              onClick={handleSubmit}\n              disabled={query.length === 0 || undefined}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddingMovie(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n\n      {errorMessage && (\n        <p className=\"help is-danger\" data-cy=\"errorMessage\">\n          Can&apos;t find a movie with such a title\n        </p>\n      )}\n    </>\n  );\n};\n","/* eslint-disable no-alert */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (addedMovie: Movie) => {\n    if (movies.some((element) => element.imdbId === addedMovie.imdbId)) {\n      alert('This movie was added already');\n\n      return;\n    }\n\n    setMovies([\n      ...movies,\n      addedMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}