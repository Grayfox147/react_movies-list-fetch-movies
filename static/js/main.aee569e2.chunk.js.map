{"version":3,"sources":["api.ts","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["Error","MovieCard","movie","title","imgUrl","description","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","FindMovie","query","setQuery","applyQuery","onSubmit","errorMessage","addMovie","setErrorMessage","inputRef","useRef","useEffect","current","focus","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","ref","onClick","disabled","length","Loader","App","useState","setMovies","appliedQuery","setAppliedQuery","setMovie","isLoading","setIsLoading","useCallback","debounce","fetch","then","res","json","catch","Response","getMovie","data","movieData","Title","Plot","Poster","imdbID","Loading","finally","addedMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aee569e2.chunk.js","sourcesContent":["import { Movie } from './types/Movie';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'http://www.omdbapi.com/?i=tt3896198&apikey=40cd6ae9';\n\n// 'https://www.omdbapi.com/?apikey=40cd6ae9'\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n\nexport enum Error {\n  Loading = 'Can&apos;t find a movie with such a title',\n}\n\nexport const NormalizeMovieData = (movieData: MovieData): Movie => {\n  return ({\n    title: movieData.Title,\n    description: movieData.Plot,\n    imgUrl: movieData.Poster === 'N/A'\n      ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n      : movieData.Poster,\n    imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n    imdbId: movieData.imdbID,\n  });\n};\n","import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    title,\n    imgUrl,\n    description,\n    imdbUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useEffect, useRef } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype FindMovieProps = {\n  query: string\n  setQuery: (event: string) => void,\n  applyQuery: (event: string) => void,\n  onSubmit: () => void,\n  errorMessage: string,\n  movie: Movie,\n  addMovie: (movie: Movie) => void,\n  setErrorMessage: (message: string) => void,\n};\n\nexport const FindMovie: React.FC<FindMovieProps> = ({\n  query,\n  setQuery,\n  applyQuery,\n  onSubmit,\n  errorMessage,\n  movie,\n  addMovie,\n  setErrorMessage,\n}) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          onSubmit();\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.target.value);\n                applyQuery(event.target.value);\n                setErrorMessage('');\n              }}\n              ref={inputRef}\n            />\n          </div>\n          {errorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className=\"button is-light\"\n              onClick={onSubmit}\n              disabled={query.length === 0}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              data-cy=\"addButton\"\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => addMovie(movie)}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        <h2 className=\"title\">Preview</h2>\n        {movie && (\n          <MovieCard movie={movie} />\n        )}\n      </div>\n    </>\n  );\n};\n","import './Loader.scss';\nimport React from 'react';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useState } from 'react';\nimport './App.scss';\nimport debounce from 'lodash.debounce';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { Error, getMovie, NormalizeMovieData } from './api';\nimport { MovieData } from './types/MovieData';\nimport { Loader } from './components/Loader/Loader';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const applyQuery = useCallback(\n    debounce(\n      setAppliedQuery,\n      1000,\n    ),\n    [appliedQuery],\n  );\n\n  const handleSubmit = () => {\n    setIsLoading(true);\n    getMovie(appliedQuery)\n      .then((data) => {\n        setMovie(NormalizeMovieData(data as MovieData));\n      })\n      .catch(() => (\n        setErrorMessage(Error.Loading)\n      ))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  const addMovie = (addedMovie: Movie) => {\n    setMovies([\n      ...movies,\n      addedMovie,\n    ]);\n\n    setAppliedQuery('');\n    setQuery('');\n    setMovie(null);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        {isLoading\n          ? (<Loader />)\n          : (\n            <FindMovie\n              query={query}\n              setQuery={setQuery}\n              applyQuery={applyQuery}\n              onSubmit={handleSubmit}\n              errorMessage={errorMessage}\n              movie={movie as Movie}\n              addMovie={addMovie}\n              setErrorMessage={setErrorMessage}\n            />\n          )}\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}